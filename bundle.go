package mirror

import (
	"fmt"
	"github.com/sirupsen/logrus"
	"github.com/urfave/cli"
	"math/rand"
	"os"
	"os/exec"
	"plugin"
)

// Bundle is a set of templates and logic packed for a purpose of
// code generation that is generalized (into the bundle)
type Bundle struct {
	RunFunc BundleRunFunc
}

type BundleRunFunc func(outDir string, models []interface{}) error

func (b *Bundle) Run(pkg string, symbols []string, outDir string) error {
	L.Method("Bundle", "Run").Trace("Invoked, should load: ", symbols)

	objPath, err := b.BuildPlugin(pkg)
	if err != nil {
		return err
	}

	// remove the object model when we are done
	defer func(oPath string) {
		L.Method("Bundle", "Run").Trace("Removing object model: ", oPath)
		if err := os.Remove(oPath); err != nil {
			L.Method("Bundle", "Run").Warn("An error occurred when removing: " + oPath)
		}
	}(objPath)

	L.Method("Bundle", "Run").Trace("Opening the plugin: ", objPath)
	models, err := b.LoadPluginSymbols(objPath, symbols)
	if err != nil {
		return err
	}
	L.Method("Bundle", "Run").Trace("Loaded symbols: ", models)

	// remove the file that was generated by the plugin build
	return b.RunFunc(outDir, models)
}

// BuildPlugin builds the given package into plugin and saves it in
// current path under a random name .so, returning the name to the caller
func (b *Bundle) BuildPlugin(pkg string) (string, error) {
	// random file name so we'll get unique loader each time
	uniq := rand.Int()

	objPath := fmt.Sprintf("mirror-%d.so", uniq)
	L.Method("Bundle", "Run").Trace("Object path: ", objPath)

	// create the plugin from the passed package
	err := WithChangedPackage(pkg, "main", func() error {
		cmd := exec.Command("go", "build", "-buildmode=plugin", "-o="+objPath, pkg)
		cmd.Stderr = os.Stderr
		cmd.Stdout = os.Stdout
		return cmd.Run()
	})

	return objPath, err
}

// LoadPluginSymbols accepts a plugin path and returns all symbols
// that were found in the given plugin.
// If * is provided as only value in `symbols`, all symbols from the
// given plugin will be returned
func (b *Bundle) LoadPluginSymbols(pluginPath string, symbols []string) ([]interface{}, error) {
	p, err := plugin.Open(pluginPath)
	if err != nil {
		return nil, err
	}

	// special case - load all exported symbols from the file
	if len(symbols) == 1 && symbols[0] == "*" {
		// TODO: make it possible via reflection (get all symbols from plugin)
	}

	// add model symbols that were loaded from the built plugin
	models := []interface{}{}
	for _, symName := range symbols {
		sym, err := p.Lookup(symName)
		if err != nil {
			return nil, err
		}

		models = append(models, sym)
	}

	return models, nil
}

// CreateDefaultApp returns default flag configuration for bundled apps
func (b *Bundle) CreateDefaultApp(name string) *cli.App {
	// override the version flag so we can use -v for verbosity
	cli.VersionFlag = cli.BoolFlag{
		Name:  "version",
		Usage: "Prints the version of the cli",
	}

	app := cli.NewApp()
	app.Name = name
	app.Flags = []cli.Flag{
		cli.StringFlag{
			Name:  "pkg, p",
			Value: ".",
			Usage: "Package to be used for model determination",
		},
		cli.StringSliceFlag{
			Name:   "models, m",
			Usage:  "Models that should be considered when generating",
			EnvVar: "MIRROR_MODELS",
		},
		cli.StringFlag{
			Name:  "out, o",
			Value: ".",
			Usage: "Directory for the generated files to be saved in",
		},
		cli.StringFlag{
			Name:   "verbosity, v",
			Value:  "info",
			Usage:  "Sets the logging level for the bundle",
			EnvVar: "MIRROR_LOG_LEVEL",
		},
	}
	app.Action = func(c *cli.Context) error {
		logLevel, err := logrus.ParseLevel(c.String("verbosity"))
		if err != nil {
			L.
				Method("Bundle", "CreateDefaultApp").
				Errorln("An error occured when parsing log level: ", err.Error())
			return err
		}
		L.SetLevel(logLevel)

		err = b.Run(
			c.String("pkg"),
			c.StringSlice("models"),
			c.String("out"),
		)

		if err != nil {
			L.
				Method("Bundle", "CreateDefaultApp").
				Errorln("An error occured when running the generator: ", err.Error())
		}

		return err
	}

	return app
}

// RunDefaultApp will automatically run the defaultly bundled application
func (b *Bundle) RunDefaultApp(name string) error {
	L.Method("Bundle", "RunDefaultApp").Trace("Invoked  with os args: ", os.Args)
	return b.CreateDefaultApp(name).Run(os.Args)
}
