package mirror

import (
	"fmt"
	"math/rand"
	"os"
	"os/exec"
	"plugin"
)

// Bundle is a set of templates and logic packed for a purpose of
// code generation that is generalized (into the bundle)
type Bundle struct {
}

type BundleRunFunc func(outDir string, models []interface{}) error

func (b *Bundle) Run(pkg string, symbols []string, outDir string, runFunc BundleRunFunc) error {
	// random file name so we'll get unique loader each time
	uniq := rand.Int()

	objPath := fmt.Sprintf("mirror-%d.so", uniq)

	// create the plugin from the passed package
	cmd := exec.Command("go", "build", "-buildmode=plugin", "-o="+objPath, pkg)
	cmd.Stderr = os.Stderr
	cmd.Stdout = os.Stdout
	if err := cmd.Run(); err != nil {
		return err
	}

	// remove the object model when we are done
	defer func(oPath string) {
		if err := os.Remove(oPath); err != nil {
			fmt.Println("An error occurred when removing " + oPath)
		}
	}(objPath)

	p, err := plugin.Open(objPath)
	if err != nil {
		return err
	}

	// add model symbols that were loaded from the built plugin
	models := []interface{}{}
	for _, symName := range symbols {
		sym, err := p.Lookup(symName)
		if err != nil {
			return err
		}

		models = append(models, sym)
	}

	// remove the file that was generated by the plugin build
	return runFunc(outDir, models)
}
