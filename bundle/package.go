package bundle

import (
	"fmt"
	"golang.org/x/tools/go/packages"
	"io/ioutil"
	"math/rand"
	"os"
	"path/filepath"
	"regexp"
)

var (
	pkgRegex = regexp.MustCompile(`(?m:^package (?P<pkg>\w+$))`)
)

// listGoFiles returns names of go files in the targeted package
func listGoFiles(pkg string) (*packages.Package, error) {
	cfg := &packages.Config{
		Mode: packages.LoadFiles,
	}
	pkgs, err := packages.Load(cfg, pkg)
	if err != nil {
		return nil, err
	}

	return pkgs[0], nil
}

func copyPackageToCache(pkg string) (string, error) {
	// Copy the directory so the plugin can be build outside
	pkgCacheDir := fmt.Sprintf("./.mirror/%d", rand.Int())
	L.Method("Bundle", "Run").Trace("Making cache dir: ", pkgCacheDir)
	err := os.MkdirAll(pkgCacheDir, os.ModePerm)
	if err != nil {
		return "", err
	}

	L.Method("Bundle", "Run").Trace("Copying ", pkg, "->", pkgCacheDir)
	return pkgCacheDir, CopyDir(pkg, pkgCacheDir, false)
}

func generateSymbolsForModels(models []string, out string) error {
	symbolsFile := filepath.Join(out, fmt.Sprintf("/%d.go", rand.Int()))

	tmpl := `// DO NOT EDIT: THIS BLOCK IS AUTOGENERATED BY MIRROR BUNDLE
package main

var (
`

	for _, m := range models {
		tmpl += "\tX" + m + "  = &" + m + "{}\n"
	}

	tmpl += ")\n"

	return ioutil.WriteFile(symbolsFile, []byte(tmpl), os.ModePerm)
}
